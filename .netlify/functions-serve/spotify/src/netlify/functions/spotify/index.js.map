{
  "version": 3,
  "sources": ["../../../../../../Users/machr/projects/personal/landing-page/netlify/functions/spotify/index.js"],
  "sourceRoot": "/var/folders/j1/7118syx14fz329j12fhck83h0000gn/T/tmp-55907-KVQU4m227bLq",
  "sourcesContent": ["\nconst client_id = process.env.SPOTIFY_CLIENT_ID\nconst client_secret = process.env.SPOTIFY_CLIENT_SECRET\nconst refresh_token = process.env.SPOTIFY_REFRESH_TOKEN\nconst TOKEN_ENDPOINT = `https://accounts.spotify.com/api/token`;\nconst encoded = Buffer.from(`${client_id}:${client_secret}`).toString('base64');\nconst LAST_PLAYED_ENDPOINT = `https://api.spotify.com/v1/me/player/recently-played`;\n\nconst handler = async () =>  {\n    const { access_token } = await getAccessToken()\n    const response = await getLastPlayedTracks(access_token)\n    console.log(response.data)\n    return {\n      statusCode: 200,\n      body: JSON.stringify(response.data)\n    };\n  };\n\n  export const getAccessToken = async () => {\n    try {\n      const response = await fetch(TOKEN_ENDPOINT, {\n        method: 'POST',\n        headers: {\n          Authorization: `Basic ${encoded}`,\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          grant_type: 'refresh_token',\n          refresh_token,\n        }),\n      });\n  \n      return response.json();\n    } catch (err) {\n      console.error(err);\n      throw err; // Throw the error to be caught by the calling function\n    }\n  };\n\n\n\n  export const getLastPlayedTracks = async (token, limit) => {\n    let songLimit = limit ? limit : 10;\n    const response = await fetch(`${LAST_PLAYED_ENDPOINT}?limit=${songLimit}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n  \n    const data = await response.json();\n    console.log(data); // Log the entire response\n  \n    return data;\n  };\n\n\n\n\n\n\nexport { handler };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,IAAM,YAAY,QAAQ,IAAI;AAC9B,IAAM,gBAAgB,QAAQ,IAAI;AAClC,IAAM,gBAAgB,QAAQ,IAAI;AAClC,IAAM,iBAAiB;AACvB,IAAM,UAAU,OAAO,KAAK,GAAG,aAAa,eAAe,EAAE,SAAS,QAAQ;AAC9E,IAAM,uBAAuB;AAE7B,IAAM,UAAU,YAAa;AACzB,QAAM,EAAE,iBAAiB,MAAM,eAAe;AAC9C,QAAM,WAAW,MAAM,oBAAoB,YAAY;AACvD,UAAQ,IAAI,SAAS,IAAI;AACzB,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,MAAM,KAAK,UAAU,SAAS,IAAI;AAAA,EACpC;AACF;AAEO,IAAM,iBAAiB,YAAY;AACxC,MAAI;AACF,UAAM,WAAW,MAAM,MAAM,gBAAgB;AAAA,MAC3C,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,eAAe,SAAS;AAAA,QACxB,gBAAgB;AAAA,MAClB;AAAA,MACA,MAAM,IAAI,gBAAgB;AAAA,QACxB,YAAY;AAAA,QACZ;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAED,WAAO,SAAS,KAAK;AAAA,EACvB,SAAS,KAAP;AACA,YAAQ,MAAM,GAAG;AACjB,UAAM;AAAA,EACR;AACF;AAIO,IAAM,sBAAsB,OAAO,OAAO,UAAU;AACzD,MAAI,YAAY,QAAQ,QAAQ;AAChC,QAAM,WAAW,MAAM,MAAM,GAAG,8BAA8B,aAAa;AAAA,IACzE,SAAS;AAAA,MACP,eAAe,UAAU;AAAA,IAC3B;AAAA,EACF,CAAC;AAED,QAAM,OAAO,MAAM,SAAS,KAAK;AACjC,UAAQ,IAAI,IAAI;AAEhB,SAAO;AACT;",
  "names": []
}
